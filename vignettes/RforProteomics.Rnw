%\VignetteIndexEntry{R for Proteomics}
%\VignetteKeywords{Bioinformatics, Proteomics, Mass spectrometry, tutorial}
%\VignettePackage{hpar}
\documentclass{article}
\usepackage{longtable}
\usepackage[authoryear,round]{natbib}
\usepackage[T1]{fontenc}
\newcommand{\R}{\texttt{R} }
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\mbox{\normalfont\textsf{#1}}}}
\newcommand{\email}[1]{\href{mailto:#1}{\normalfont\texttt{#1}}}
%% colors
\definecolor{Red}{rgb}{0.7,0,0}
\definecolor{Blue}{rgb}{0,0,0.8}

\usepackage{geometry}
\geometry{verbose,
  tmargin = 2.5cm,
  bmargin = 2.5cm,
  lmargin = 3.5cm,
  rmargin = 3.5cm}

\usepackage{hyperref}
\usepackage{breakurl}
\hypersetup{%
  pdfusetitle,
  bookmarks = {true},
  bookmarksnumbered = {true},
  bookmarksopen = {true},
  bookmarksopenlevel = 2,
  unicode = {true},
  breaklinks = {false},
  hyperindex = {true},
  colorlinks = {true},
  linktocpage = {true},
  plainpages = {false},
  linkcolor = {Blue},
  citecolor = {Blue},
  urlcolor = {Red},
  pdfstartview = {Fit},
  pdfpagemode = {UseOutlines},
  pdfview = {XYZ null null null}
}

\input{Author.tex}

\begin{document}

\title{\R for Proteomics: using \R and Bioconductor to analyse proteomics data}

\maketitle

<<'setup', include = FALSE, cache = FALSE>>=
library(knitr)
opts_chunk$set(fig.align = 'center', 
               fig.show = 'hold', 
               par = TRUE,
               prompt = TRUE,
               comment = NA)
options(replace.assign = TRUE, 
        width = 70)
knit_hooks$set(par = function(before, options, envir) {
  if (before && options$fig.show != 'none') 
    par(mar = c(4,4,.1,.1),
        cex.lab = .95,
        cex.axis = .9,
        mgp = c(2,.7,0),
        tcl = -.3)
})
@
%% $

<<'env0', echo = FALSE>>=
suppressPackageStartupMessages(library("MSnbase"))
@ 

%% Abstract and keywords %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\vskip 0.3in minus 0.1in
\hrule
\begin{abstract}
This vignette shows and executes the code presented in the manuscript \textit{R for Proteomics}. 
\end{abstract}

\textit{Keywords}: bioinformatics, proteomics, mass spectrometry, tutorial
\vskip 0.1in minus 0.05in
\hrule
\vskip 0.2in minus 0.1in
\vspace{10mm}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% \tableofcontents
%% \newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}\label{sec:intro} 

<<env>>=
library("RforProteomics")
@ 

\section{Data standards and input/ouput}

\subsection{The \Rpackage{mzR} package}

This code chunk, taken mainly from the \Rfunction{openMSfile} documentation illustrated how to open a connection to an raw data file. The example \textt{mzML} data is taken from the \Rpackage{msdata} data package. The code below would be applicatble to an \texttt{mzXML} of \texttt{mzData} file.

<<mzr>>=
## load the required packages
library("mzR") ## the software package
library("msdata") ## the data package
## below, we extract the releavant example file 
## from the local 'msdata' installation 
filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="MM14.mzML",
                   full.names=TRUE, recursive = TRUE)
## creates a commection to the mzML file
mz <- openMSfile(file)
## demonstraction of data access
fileName(mz)
isInitialized(mz)
runInfo(mz)
instrumentInfo(mz)
## once finished, it is good to explicitely 
## close the connection
close(mz)
@ 

\section{Raw data abstraction with \Robject{MSnExp} objects}

<<msnexp, cache=TRUE, cache=TRUE>>= 
mzXML <- dir(system.file(package="MSnbase",dir="extdata"),
             full.name=TRUE,
             pattern="mzXML$")
raw <- readMSData(mzXML, verbose = FALSE)
raw
## Extract a sigle spectrum
raw[[3]]
@ 
%% $

\begin{figure}[!ht]
<<msnexpPlot, dev='pdf', echo=TRUE, fig.width=5.5, fig.height=5.5, fig.keep='all', out.width='.49\\linewidth'>>=
plot(raw, full=TRUE)
plot(raw[[3]], full=TRUE, reporters=iTRAQ4)
@ 
\caption{The \Rfunction{plot} method can be used on experiments, i.e. spectrum collections (left), or individual spectra (right). }
\label{fig:msnexp}
\end{figure}

\subsection{\texttt{mgf} read/write support}



As an running example throughout this document, we will use the \texttt{PXD000001} data set. The code chunk below first downloads this data file from the ProteomicXchange server using the \Rfunction{getPXD000001mzXML} function from the \Rpackage{RforProteomics} package.


<<mztab>>=
mztab <- getPXD000001mzTab()
mztab ## the mzTab file name
## Load mzTabs's peptide data 
qnt <- readMzTabData(mztab, what = "PEP")
sampleNames(qnt) <- reporterNames(TMT6)
qntS <- normalise(qnt, "sum")
qntV <- normalise(qntS, "vsn")
qntV2 <- normalise(qnt, "vsn")

acc <- c("P00489", "P00924", 
         "P02769", "P62894",
         "ECA")

idx <- sapply(acc, grep, fData(qnt)$accession)
idx2 <- sapply(idx, head, 3)
small <- qntS[unlist(idx2), ]

idx3 <- sapply(idx, head, 10)
medium <- qntV[unlist(idx3), ]

m <- exprs(medium)
colnames(m) <- c("126", "127", "128",
                 "129", "130", "131")
rownames(m) <- fData(medium)$accession
rownames(m)[grep("CYC", rownames(m))] <- "CYT"
rownames(m)[grep("ENO", rownames(m))] <- "ENO"
rownames(m)[grep("ALB", rownames(m))] <- "BSA"
rownames(m)[grep("PYGM", rownames(m))] <- "PHO"
rownames(m)[grep("ECA", rownames(m))] <- "Background"

library(RColorBrewer)
cls <- c(brewer.pal(length(unique(rownames(m)))-1, "Set1"),
         "grey")
names(cls) <- unique(rownames(m))
wbcol <- colorRampPalette(c("white", "darkblue"))(256)

pdf("PXD000001-heatmap.pdf", width = 5, height = 5)
heatmap(m, col = wbcol, RowSideColors=cls[rownames(m)])
dev.off()

library(ggplot2)
library(reshape2)

dfr <- data.frame(exprs(small),
                  Protein = as.character(fData(small)$accession),
                  Feature = featureNames(small),
                  stringsAsFactors = FALSE)
colnames(dfr) <- c("126", "127", "128", "129", "130", "131", "Protein", "Feature")
dfr$Protein[dfr$Protein == "sp|P00924|ENO1_YEAST"] <- "ENO"
dfr$Protein[dfr$Protein == "sp|P62894|CYC_BOVIN"]  <- "CYT"
dfr$Protein[dfr$Protein == "sp|P02769|ALBU_BOVIN"] <- "BSA"
dfr$Protein[dfr$Protein == "sp|P00489|PYGM_RABIT"] <- "PH0"
dfr$Protein[grep("ECA", dfr$Protein)] <- "Background"
dfr2 <- melt(dfr)

pdf("PXD000001-TMTspikes.pdf", width = 10, height = 5.5)
ggplot(aes(x = variable, y = value, colour = Protein), data = dfr2) +
  geom_point() + geom_line(aes(group=as.factor(Feature)), alpha = 0.5) +
  facet_grid(. ~ Protein) + theme(legend.position="none") +
  labs(x = "Reporters", y = "Normalised intensity")
dev.off()

mzxml <- getPXD000001mzXML()
rawms <- readMSData(mzxml, centroided = TRUE)
dmz <- plotMzDelta(rawms, reporters = TMT6)
dmz <- dmz + ggtitle("")

pdf("PXD000001-MzDelta.pdf", width = 5, height = 5)
print(dmz)
dev.off()

qntms <- quantify(rawms, reporters = TMT7, method = "max")

d <- data.frame(Report = rowSums(exprs(qntms)[, 1:6]),
                Incomplete = exprs(qntms)[, 7])
d <- log(d)


##pdf("PXD000001-IncompleteDissoc.pdf", width = 7, height = 7)
plot(Signal ~ Incomplete, data = d2, 
     xlab = expression(Incomplete~dissociation), 
     ylab = expression(Sum~of~reporters~intensities),
     pch = 19,
     col = "#4582B380")
grid()
abline(0, 1, lty = "dotted")
abline(lm(Signal ~ Incomplete, data = d2), col = "darkblue")
##dev.off()


cls <- rep("#00000050", nrow(qnt))
pch <- rep(1, nrow(qnt))
cls[grep("P02769", fData(qnt)$accession)] <- "gold4" ## BSA
cls[grep("P00924", fData(qnt)$accession)] <- "dodgerblue" ## ENO
cls[grep("P62894", fData(qnt)$accession)] <- "springgreen4" ## CYT
cls[grep("P00489", fData(qnt)$accession)] <- "darkorchid2" ## PHO
pch[grep("P02769", fData(qnt)$accession)] <- 19
pch[grep("P00924", fData(qnt)$accession)] <- 19
pch[grep("P62894", fData(qnt)$accession)] <- 19
pch[grep("P00489", fData(qnt)$accession)] <- 19
 
pdf("PXD000001-MAplot.pdf", width = 5.5, height = 5.5)
MAplot(qnt[, c(4, 2)], cex = .9, col = cls, pch = pch, show.statistics = FALSE)
dev.off()

@ 

<<maldiquant>>=
## From http://strimmerlab.org/software/maldiquant/download/processing-peaks.R

## load MALDIquant library
library("MALDIquant")
#### DATA INPUT ####
library("readBrukerFlexData")
datapath <- file.path(system.file("Examples", package = "readBrukerFlexData"), 
                      "2010_05_19_Gibb_C8_A1")
dir(datapath)
sA1 <- mqReadBrukerFlex(datapath)
par(mfrow=c(2, 1))
lapply(sA1, plot)
par(mfrow=c(1, 1))

# in the following we use only the first spectrum
s <- sA1[[1]] 

plot(s)
summary(mass(s))
summary(intensity(s))
head(as.matrix(s))

#### PREPROCESSING ####
## sqrt transform (for variance stabilization)
s2 <- transformIntensity(s, fun=sqrt)
s2

## smoothing
simpleSmooth <- function(y) {
  return ( filter(y, rep(1, 5)/5, sides=2) ) # 5 point moving average 
}

s3 <- transformIntensity(s2, simpleSmooth)
s3
length(s2) # 22431
length(s3) # 22427 - at both ends data points have been removed


## baseline subtraction
s4 <- removeBaseline(s3, method="SNIP")
s4


#### DATA REDUCTION ####

# peak picking
p <- detectPeaks(s4)
length(p) # 181
peak.data <- as.matrix(p) # extract peak information


#### PRODUCE SOME PLOTS ####
pdf("MALDIquant.pdf", width = 11, height = 7)
par(mfrow=c(2,3))
xl <- range(mass(s)) # use same xlim on all plots for better comparison
plot(s, sub="", main="1: raw", xlim=xl)
plot(s2, sub="", main="2: variance stabilisation", xlim=xl)
plot(s3, sub="", main="3: smoothing", xlim=xl)
plot(s4, sub="", main="4: base line correction", xlim=xl)
plot(s4, sub="", main="5: peak detection", xlim=xl)
points(p)
top20 <- intensity(p) %in% sort(intensity(p), decreasing=TRUE)[1:20]
labelPeaks(p, index=top20, underline=TRUE)
plot(p, sub="", main="6: peak plot", xlim=xl)
labelPeaks(p, index=top20, underline=TRUE)
dev.off()
@ 



<<isobar>>=

library(isobar)
.ions <- exprs(qnt)
.mass <- matrix(mz(TMT6), nrow(qnt), byrow=TRUE, ncol = 6)
colnames(.ions) <- colnames(.mass) <- reporterTagNames(x)
rownames(.ions) <- rownames(.mass) <- 
  paste(fData(qnt)$accession, fData(qnt)$sequence, sep = ".")
pgtbl <- data.frame(spectrum = featureNames(qnt),
                    peptide = fData(qnt)$sequence,
                    modif = ":",
                    start.pos = 1,
                    protein = fData(qnt)$accession,
                    accession = fData(qnt)$accession,
                    row.names = featureNames(qnt))
x <- new("TMT6plexSpectra",pgtbl,.ions,.mass)
featureData(x)$proteins <- as.character(fData(qnt)$accession)
x <- correctIsotopeImpurities(x) ## useless, identity matrix
x <- normalize(x, per.file = FALSE) ## little effect
spks <- c(protein.g(proteinGroup(x), "P00489"),
          protein.g(proteinGroup(x), "P00924"),
          protein.g(proteinGroup(x), "P02769"),
          protein.g(proteinGroup(x), "P62894"))


cls2 <- rep("#00000040", nrow(x))
pch2 <- rep(1, nrow(x))
cls2[grep("P02769", featureNames(x))] <- "gold4" ## BSA
cls2[grep("P00924", featureNames(x))] <- "dodgerblue" ## ENO
cls2[grep("P62894", featureNames(x))] <- "springgreen4" ## CYT
cls2[grep("P00489", featureNames(x))] <- "darkorchid2" ## PHO
pch2[grep("P02769", featureNames(x))] <- 19
pch2[grep("P00924", featureNames(x))] <- 19
pch2[grep("P62894", featureNames(x))] <- 19
pch2[grep("P00489", featureNames(x))] <- 19



nm <- NoiseModel(x)
ib.background <- subsetIBSpectra(x, protein=spks, "exclude")
nm.background <- NoiseModel(ib.background)
ib.spks <- subsetIBSpectra(x, protein = spks,
                           direction="exclude others",
                           specificity="reporter-specific")
nm.spks <- NoiseModel(ib.spks, one.to.one=FALSE, pool=TRUE)

ratios <- 10^estimateRatio(x, nm,
                           channel1="127", channel2="129",
                           protein = spks,
                           combine = FALSE)[, "lratio"]

res <- estimateRatio(x, nm,
                     channel1="127", channel2="129",
                     protein = unique(fData(x)$proteins), 
                     combine = FALSE,
                     sign.level = 0.01)[, c(1, 2, 6, 8)]
res <- as.data.frame(res)
res$lratio <- -(res$lratio)

cls3 <- rep("#00000050", nrow(res))
pch3 <- rep(1, nrow(res))
cls3[grep("P02769", rownames(res))] <- "gold4" ## BSA
cls3[grep("P00924", rownames(res))] <- "dodgerblue" ## ENO
cls3[grep("P62894", rownames(res))] <- "springgreen4" ## CYT
cls3[grep("P00489", rownames(res))] <- "darkorchid2" ## PHO
##cls3[grep("P00761", rownames(res))] <- "red" ## Trypsin
pch3[grep("P02769", rownames(res))] <- 19
pch3[grep("P00924", rownames(res))] <- 19
pch3[grep("P62894", rownames(res))] <- 19
pch3[grep("P00489", rownames(res))] <- 19
##pch3[grep("P00761", rownames(res))] <- 19

rat.exp <- c(PHO = 2/2, 
             ENO = 5/1, 
             BSA = 2.5/10, 
             CYT = 1/1)

pdf("analysis-isobar.pdf", width = 10, height = 5)
par(mfrow = c(1,2))
maplot(x,
       noise.model = c(nm.background, nm.spks, nm),
       channel1="127", channel2="129",
       pch = 19, col = cls2,       
       main = "Spectra MA plot")
abline(h = 1, lty = "dashed", col = "grey")
legend("topright", 
       c("BSA", "ENO", "CYT", "PHO"),
       pch = 19, col = c("gold4", "dodgerblue", 
                   "springgreen4", "darkorchid2"),
       bty = "n", cex = .7)
## 
plot(res$lratio, -log10(res$p.value.rat), col = cls3, pch = pch3,
     xlab = expression(log[10]~fold-change),
     ylab = expression(-log[10]~p-value),
     main = "Protein volcano plot", 
     xlim = c(-0.7, 0.7))
grid()
abline(h = -log10(0.01), lty = "dotted")
abline(v = log10(c(2, 0.5)), lty = "dotted")
abline(v = -0.003, col = "springgreen4", lty = "dashed", lwd = 2)
abline(v = 0.003, col = "darkorchid2", lty = "dashed", lwd = 2)
abline(v = log10(5), col = "dodgerblue", lty = "dashed", lwd = 2)
abline(v = log10(0.25), col = "gold4", lty = "dashed", lwd = 2)
points(res[spks, "lratio"], 
       -log10(res[spks, "p.value.rat"]), 
       col = c("darkorchid2", "dodgerblue", 
         "gold4", "springgreen4"),
       pch = 19)
dev.off()

@ 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section*{Session information}\label{sec:sessionInfo} 
<<sessioninfo, results = tex, echo = FALSE, cache = FALSE>>=
toLatex(sessionInfo())
@

\end{document}
